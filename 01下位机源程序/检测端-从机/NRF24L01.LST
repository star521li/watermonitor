C51 COMPILER V9.00   NRF24L01                                                              06/10/2018 13:28:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN NRF24L01.OBJ
COMPILER INVOKED BY: G:\software_biye\keil\C51\BIN\C51.EXE NRF24L01.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #include"global_define.h"
   3          #include"NRF24L01.h"
   4          #include"Delay.h"
   5          
   6          
   7          sbit CE   = P1^5;  // Chip Enable pin signal (output)
   8          sbit CSN  = P1^0;  // Slave Select pin, (output to CSN, nRF24L01)
   9          sbit IRQ  = P1^2;  // Interrupt signal, from nRF24L01 (input)
  10          sbit MISO = P1^3;  // Master In, Slave Out pin (input)
  11          sbit MOSI = P1^1;  // Serial Clock pin, (output)
  12          sbit SCLK  = P1^4;  // Master Out, Slave In pin (output
  13          
  14          idata uchar RevTempDate[RX_DATA_WITDH];  //×îºóÒ»Î»ÓÃÀ´´æ·Å½áÊø±êÖ¾
  15          uchar code TxAddr[TX_ADDR_WITDH]={0x34,0x43,0x10,0x10,0x01};//·¢ËÍµØÖ·
  16          
  17          /*****************×´Ì¬±êÖ¾*****************************************/
  18          uchar bdata sta;   //×´Ì¬±êÖ¾
  19          sbit RX_DR=sta^6;
  20          sbit TX_DS=sta^5;
  21          sbit MAX_RT=sta^4;
  22          
  23          
  24          
  25          /*****************SPIÊ±Ðòº¯Êý******************************************/
  26          uchar NRFSPI(uchar date)
  27          {
  28   1          uchar i;
  29   1              for(i=0;i<8;i++)          // Ñ­»·8´Î
  30   1              {
  31   2                if(date&0x80)
  32   2                  MOSI=1;
  33   2                else
  34   2                  MOSI=0;   // byte×î¸ßÎ»Êä³öµ½MOSI
  35   2                date<<=1;             // µÍÒ»Î»ÒÆÎ»µ½×î¸ßÎ»
  36   2                SCLK=1; 
  37   2                if(MISO)               // À­¸ßSCK£¬nRF24L01´ÓMOSI¶ÁÈë1Î»Êý¾Ý£¬Í¬Ê±´ÓMISOÊä³ö1Î»Êý¾Ý
  38   2                  date|=0x01;         // ¶ÁMISOµ½byte×îµÍÎ»
  39   2                SCLK=0;               // SCKÖÃµÍ
  40   2              }
  41   1          return(date);               // ·µ»Ø¶Á³öµÄÒ»×Ö½Ú
  42   1      }
  43          /**********************NRF24L01³õÊ¼»¯º¯Êý*******************************/
  44          void NRF24L01Int()
  45          {
  46   1              Delay(2);//ÈÃÏµÍ³Ê²Ã´¶¼²»¸É
  47   1              CE=0; //´ý»úÄ£Ê½1   
  48   1              CSN=1;  
  49   1              SCLK=0;
  50   1              IRQ=1;   
  51   1      }
  52          /*****************SPI¶Á¼Ä´æÆ÷Ò»×Ö½Úº¯Êý*********************************/
  53          uchar NRFReadReg(uchar RegAddr)
  54          {
  55   1         uchar BackDate;
C51 COMPILER V9.00   NRF24L01                                                              06/10/2018 13:28:51 PAGE 2   

  56   1         CSN=0;//Æô¶¯Ê±Ðò
  57   1         NRFSPI(RegAddr);//Ð´¼Ä´æÆ÷µØÖ·
  58   1         BackDate=NRFSPI(0x00);//Ð´Èë¶Á¼Ä´æÆ÷Ö¸Áî  
  59   1         CSN=1;
  60   1         return(BackDate); //·µ»Ø×´Ì¬
  61   1      }
  62          /*****************SPIÐ´¼Ä´æÆ÷Ò»×Ö½Úº¯Êý*********************************/
  63          uchar NRFWriteReg(uchar RegAddr,uchar date)
  64          {
  65   1         uchar BackDate;
  66   1         CSN=0;//Æô¶¯Ê±Ðò
  67   1         BackDate=NRFSPI(RegAddr);//Ð´ÈëµØÖ·
  68   1         NRFSPI(date);//Ð´ÈëÖµ
  69   1         CSN=1;
  70   1         return(BackDate);
  71   1      }
  72          /*****************SPI¶ÁÈ¡RXFIFO¼Ä´æÆ÷µÄÖµ********************************/
  73          uchar NRFReadRxDate(uchar RegAddr,uchar *RxDate,uchar DateLen)
  74          {  //¼Ä´æÆ÷µØÖ·//¶ÁÈ¡Êý¾Ý´æ·Å±äÁ¿//¶ÁÈ¡Êý¾Ý³¤¶È//ÓÃÓÚ½ÓÊÕ
  75   1          uchar BackDate,i;
  76   1              CSN=0;//Æô¶¯Ê±Ðò
  77   1              BackDate=NRFSPI(RegAddr);//Ð´ÈëÒª¶ÁÈ¡µÄ¼Ä´æÆ÷µØÖ·
  78   1              for(i=0;i<DateLen;i++) //¶ÁÈ¡Êý¾Ý
  79   1                {
  80   2                   RxDate[i]=NRFSPI(0);
  81   2                } 
  82   1          CSN=1;
  83   1         return(BackDate); 
  84   1      }
  85          /*****************SPIÐ´ÈëTXFIFO¼Ä´æÆ÷µÄÖµ**********************************/
  86          uchar NRFWriteTxDate(uchar RegAddr,uchar *TxDate,uchar DateLen)
  87          { //¼Ä´æÆ÷µØÖ·//Ð´ÈëÊý¾Ý´æ·Å±äÁ¿//¶ÁÈ¡Êý¾Ý³¤¶È//ÓÃÓÚ·¢ËÍ
  88   1         uchar BackDate,i;
  89   1         CSN=0;
  90   1         BackDate=NRFSPI(RegAddr);//Ð´ÈëÒªÐ´Èë¼Ä´æÆ÷µÄµØÖ·
  91   1         for(i=0;i<DateLen;i++)//Ð´ÈëÊý¾Ý
  92   1           {
  93   2                  NRFSPI(*TxDate++);
  94   2               }   
  95   1         CSN=1;
  96   1         return(BackDate);
  97   1      }
  98          /*****************NRFÉèÖÃÎª·¢ËÍÄ£Ê½²¢·¢ËÍÊý¾Ý******************************/
  99          void NRFSetTxMode(uchar *TxDate)
 100          {//·¢ËÍÄ£Ê½
 101   1          CE=0; 
 102   1              NRFWriteTxDate(W_REGISTER+TX_ADDR,TxAddr,TX_ADDR_WITDH);//Ð´¼Ä´æÆ÷Ö¸Áî+½ÓÊÕµØÖ·Ê¹ÄÜÖ¸Áî+½ÓÊÕµØÖ·+µØÖ·¿
             -í¶È
 103   1              NRFWriteTxDate(W_REGISTER+RX_ADDR_P0,TxAddr,TX_ADDR_WITDH);//ÎªÁËÓ¦´ð½ÓÊÕÉè±¸£¬½ÓÊÕÍ¨µÀ0µØÖ·ºÍ·¢ËÍµØÖ·ÏàÍ
             -¬
 104   1              NRFWriteTxDate(W_TX_PAYLOAD,TxDate,TX_DATA_WITDH);//Ð´ÈëÊý¾Ý 
 105   1              /******ÏÂÃæÓÐ¹Ø¼Ä´æÆ÷ÅäÖÃ**************/
 106   1              NRFWriteReg(W_REGISTER+EN_AA,0x01);       // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
 107   1              NRFWriteReg(W_REGISTER+EN_RXADDR,0x01);   // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
 108   1              NRFWriteReg(W_REGISTER+SETUP_RETR,0x0a);  // ×Ô¶¯ÖØ·¢ÑÓÊ±µÈ´ý250us+86us£¬×Ô¶¯ÖØ·¢10´Î
 109   1              NRFWriteReg(W_REGISTER+RF_CH,0x40);         // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
 110   1              NRFWriteReg(W_REGISTER+RF_SETUP,0x07);    // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ
 111   1              NRFWriteReg(W_REGISTER+CONFIG,0x0e);      // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç  
 112   1              CE=1;
 113   1              Delay(5);//±£³Ö10usÃëÒÔÉÏ
 114   1      }
 115          /*****************NRFÉèÖÃÎª½ÓÊÕÄ£Ê½²¢½ÓÊÕÊý¾Ý******************************/
C51 COMPILER V9.00   NRF24L01                                                              06/10/2018 13:28:51 PAGE 3   

 116          //Ö÷Òª½ÓÊÕÄ£Ê½
 117          void NRFSetRXMode()
 118          {
 119   1              CE=0;  
 120   1              NRFWriteTxDate(W_REGISTER+RX_ADDR_P0,TxAddr,TX_ADDR_WITDH);  // ½ÓÊÕÉè±¸½ÓÊÕÍ¨µÀ0Ê¹ÓÃºÍ·¢ËÍÉè±¸ÏàÍ¬µÄ·¢
             -ËÍµØÖ·
 121   1              NRFWriteReg(W_REGISTER+EN_AA,0x01);               // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
 122   1              NRFWriteReg(W_REGISTER+EN_RXADDR,0x01);           // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
 123   1              NRFWriteReg(W_REGISTER+RF_CH,0x40);                 // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
 124   1              NRFWriteReg(W_REGISTER+RX_PW_P0,TX_DATA_WITDH);  // ½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í¶È
 125   1              NRFWriteReg(W_REGISTER+RF_SETUP,0x07);            // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ*/
 126   1              NRFWriteReg(W_REGISTER+CONFIG,0x0f);              // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç£¬½ÓÊÕÄ£Ê½
 127   1              CE = 1;
 128   1              Delay(5);//±£³Ö10usÃëÒÔÉÏ     
 129   1      }
 130          
 131          
 132          
 133          
 134          
 135          
 136          
 137          // ------------------------------½ÓÊÕÊý¾Ý------------------------------------------
 138          
 139          /****************************¼ì²âÊÇ·ñÓÐ½ÓÊÕµ½Êý¾Ý******************************/
 140          
 141          void CheckACK_RX()
 142          {  //ÓÃÓÚ·¢ÉäÄ£Ê½½ÓÊÕÓ¦´ðÐÅºÅ
 143   1              sta=NRFReadReg(R_REGISTER+STATUS);                    // ·µ»Ø×´Ì¬¼Ä´æÆ÷
 144   1              if(TX_DS)
 145   1                 NRFWriteReg(W_REGISTER+STATUS,0xff);  // Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
 146   1      }
 147          
 148          /*************************½ÓÊÕÊý¾Ý*********************************************/
 149          
 150          void GetDate()                           
 151          {
 152   1          sta=NRFReadReg(R_REGISTER+STATUS);//·¢ËÍÊý¾Ýºó¶ÁÈ¡×´Ì¬¼Ä´æÆ÷
 153   1          if(RX_DR)                           // ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Êý¾Ý
 154   1           {
 155   2                 CE=0;//´ý»ú
 156   2                 NRFReadRxDate(R_RX_PAYLOAD,RevTempDate,RX_DATA_WITDH);// ´ÓRXFIFO¶ÁÈ¡Êý¾Ý ½ÓÊÕ4Î»¼´¿É£¬ºóÒ»Î»Î»½áÊøÎ»
 157   2      //         LcdWriteChStr(2,65,RevTempDate);//LCD12864Òº¾§ÏÔÊ¾
 158   2      //         MAX232SendDate();//·¢ËÍÊý¾Ýµ½ÉÏÎ»»ú   
 159   2                 NRFWriteReg(W_REGISTER+STATUS,0xff); //½ÓÊÕµ½Êý¾ÝºóRX_DR,TX_DS,MAX_PT¶¼ÖÃ¸ßÎª1£¬Í¨¹ýÐ´1À´Çå³þÖÐ¶Ï±ê
 160   2                 CSN=0;
 161   2                 NRFSPI(FLUSH_RX);//ÓÃÓÚÇå¿ÕFIFO £¡£¡¹Ø¼ü£¡£¡²»È»»á³öÏÖÒâÏë²»µ½µÄºó¹û£¡£¡£¡´ó¼Ò¼Ç×¡£¡£¡ 
 162   2                 CSN=1;                
 163   2           }
 164   1          //NRFWriteReg(W_REGISTER+STATUS,0xff); //½ÓÊÕµ½Êý¾ÝºóRX_DR,TX_DS,MAX_PT¶¼ÖÃ¸ßÎª1£¬Í¨¹ýÐ´1À´Çå³þÖÐ¶Ï±ê
 165   1              
 166   1                        
 167   1      } 
 168          
 169          
 170          
 171          
 172          
 173          
 174          
 175          
 176          // ------------------------------·¢ËÍÊý¾Ý------------------------------------------
C51 COMPILER V9.00   NRF24L01                                                              06/10/2018 13:28:51 PAGE 4   

 177          
 178          /****************************¼ì²âÓ¦´ðÐÅºÅ******************************/
 179          uchar CheckACK_RP()
 180          {  //ÓÃÓÚ·¢Éä
 181   1              sta=NRFReadReg(R_REGISTER+STATUS);                    // ·µ»Ø×´Ì¬¼Ä´æÆ÷
 182   1              if(TX_DS||MAX_RT) //·¢ËÍÍê±ÏÖÐ¶Ï
 183   1              {
 184   2                 NRFWriteReg(W_REGISTER+STATUS,0xff);  // Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
 185   2                 CSN=0;
 186   2                 NRFSPI(FLUSH_TX);//ÓÃÓÚÇå¿ÕFIFO £¡£¡¹Ø¼ü£¡£¡²»È»»á³öÏÖÒâÏë²»µ½µÄºó¹û£¡£¡£¡´ó¼Ò¼Ç×¡£¡£¡  
 187   2             CSN=1; 
 188   2                 return(0);
 189   2              }
 190   1              else
 191   1                 return(1);
 192   1      }
 193          /******************ÅÐ¶ÏÊÇ·ñ½ÓÊÕÊÕµ½Êý¾Ý£¬½Óµ½¾Í´ÓRXÈ¡³ö*********************/
 194          //ÓÃÓÚ½ÓÊÕÄ£Ê½
 195          uchar NRFRevDate(uchar *RevDate)
 196          {
 197   1               uchar RevFlags=0;
 198   1               sta=NRFReadReg(R_REGISTER+STATUS);//·¢ËÍÊý¾Ýºó¶ÁÈ¡×´Ì¬¼Ä´æÆ÷
 199   1           if(RX_DR)                          // ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Êý¾Ý
 200   1               {
 201   2                  CE=0;                       //SPIÊ¹ÄÜ
 202   2                      NRFReadRxDate(R_RX_PAYLOAD,RevDate,RX_DATA_WITDH);// ´ÓRXFIFO¶ÁÈ¡Êý¾Ý
 203   2                      RevFlags=1;        //¶ÁÈ¡Êý¾ÝÍê³É±êÖ¾
 204   2                }
 205   1               NRFWriteReg(W_REGISTER+STATUS,0xff); //½ÓÊÕµ½Êý¾ÝºóRX_DR,TX_DS,MAX_PT¶¼ÖÃ¸ßÎª1£¬Í¨¹ýÐ´1À´Çå³þÖÐ¶Ï±ê
 206   1               return(RevFlags);
 207   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    459    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      16
   IDATA SIZE       =     32    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
